#!/usr/bin/env bash
#
# The contents of this file are subject to the Apache 2.0 license you may not
# use this file except in compliance with the License.
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
#
# Copyright 2018 DFT project (https://www.firmwaretoolkit.org).
# All rights reserved. Use is subject to license terms.
#
#
# Contributors list :
#
#    William Bonnet     wllmbnnt@gmail.com, wbonnet@theitmakers.com
#
#

# -----------------------------------------------------------------------------
#
# @SBIT description short description
#
# @SBIT hint  -1   Wrong number of arguments. Should be 1. Please check args in your test file
# @SBIT hint   1   File does not exist
# @SBIT hint   2   XPath query failed
# @SBIT hint   3   Node value does not match
#
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
#
# Argument definition
#
#    arg 1 : XML file to check
#    arg 2 : XPath query
#    arg 3 : Expected value
#
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Beginning of test script
# -----------------------------------------------------------------------------

# Activate "fail fast". Stop on first error encountered.
set -e

#
# Method used to setup the test environment. You should do any initialisation,
# temporary files or directories creation, serial configuration, or whatever you
# need to do... here
#
setup()
{
    # Check the number of arguments. Should be xXx
    if [ ! "${ARG_COUNT}" == "3" ] ;
    then
      return -1
    fi

    # Went so far ? thus everything is ok...
    return 0
}

#
# Method executing the real test case. It is called after setup, and before
# teardown. In case of succes it should return 0. Otherwise it returns an error
# code that will be used as exit code for this script.
#
# You may define this error code as an hint in the meta section (beginning of
# this script) as a @SBIT hint. Hints are using two arguments. First is an index,
# which must have the same value as the exit code you return, and a string that
# will be printed by the sbit engine as an "hint" to the tester.
#
# Expect hint to be displayed like this "Error 3 occured. You should check this"
#
do_test()
{
  # Compare to first args
  if [ ! -f "${FILE_TO_CHECK}" ] ;
  then
    return 1
  fi

  # Execute XPath query
  NODE_VALUE=$(xmllint --xpath ${XPATH_QUERY} ${FILE_TO_CHECK})

  # Check if xmllint failed
  if [ ! $? == 0 ] ;
  then
    return 2
  fi

  # Check if node value is the expected value
  if [ ! "${EXPECTED_NODE_VALUE}" == "${NODE_VALUE}" ] ;
  then
    return 3
  fi

  # Main exit, no error detected, return 0
  return 0
}

#
# Method used to cleanup the test environment after the test has been executed.
# Test environment should be restored to the same state it was in before setup
# was executed
#
teardown()
{
    # Went so far ? thus everything is ok...
    return 0
}

# Store command line arguments
ARG_COUNT=$#
FILE_TO_CHECK="$1"
XPATH_QUERY="$2"
EXPECTED_NODE_VALUE="$3"

# Call the setup method and check its return code is 0. Otherwise something went wrong
setup
ret_setup=$?
if [ ! ${ret_setup} == 0 ]; then exit ${ret_setup} ; fi

# Call the test method and stores its return code in order to use it as final exit code
do_test
ret_test=$?

# Call the teardown method and check its return code is 0. Otherwise something went wrong
teardown
ret_teardown=$?
if [ ! ${ret_teardown} == 0 ]; then exit ${ret_teardown} ; fi

# Main exit, no error detected, return 0
exit ${ret_test}
